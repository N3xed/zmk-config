/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_de_swiss.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt { tapping-term-ms = <150>; };

&caps_word {
    continue-list = <BACKSPACE DELETE SLASH QUESTION>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
};

/ {
    behaviors {
        n1_f2: n1_f2 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DE_N1>, <&kp F2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n2_f3: n2_f3 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DE_N2>, <&kp F3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n3_f4: n3_f4 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DE_N3>, <&kp F4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n4_f5: n4_f5 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DE_N4>, <&kp F5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n5_f6: n5_f6 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DE_N5>, <&kp F6>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n6_f7: n6_f7 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DE_N6>, <&kp F7>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n7_f8: n7_f8 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DE_N7>, <&kp F8>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n8_f9: n8_f9 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DE_N8>, <&kp F9>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n9_f10: n9_f10 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DE_N9>, <&kp F10>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n0_f11: n0_f11 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DE_N0>, <&kp F11>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bs_f12: bs_f12 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp BACKSPACE>, <&kp F12>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tab_f1: tab_f1 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp TAB>, <&kp F1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        BT_NXT_PREV_CLR: BT_NXT_PREV_CLR {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&bt BT_NXT>, <&BT_PREV_CLR>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        MUSIC_NXT_VOL: MUSIC_NXT_VOL {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp C_NEXT>, <&kp C_VOLUME_UP>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        esc_slash: esc_slash {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp ESC>, <&kp LS(DE_O_UMLAUT)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        BS_SFT_DEL: BS_SFT_DEL {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        LALT_RALT: LALT_RALT {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT>, <&kp RIGHT_ALT>;
        };

        MUSIC_PRV_VOL: MUSIC_PRV_VOL {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp C_PREVIOUS>, <&kp C_VOLUME_DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        MUSIC_TGGL_VOL: MUSIC_TGGL_VOL {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp C_PLAY_PAUSE>, <&kp K_MUTE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        BT_PREV_CLR: BT_PREV_CLR {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&bt BT_PRV>, <&bt BT_CLR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        OE_SHFT_UE: OE_SHFT_UE {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DE_O_UMLAUT>, <&kp DE_U_UMLAUT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        LEFT_SFT_HOME: LEFT_SFT_HOME {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp LEFT>, <&kp HOME>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        DWN_SFT_PGDWN: DWN_SFT_PGDWN {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DOWN>, <&kp PAGE_DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        UP_SFT_PGUP: UP_SFT_PGUP {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp UP>, <&kp PAGE_UP>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        RGHT_SFT_END: RGHT_SFT_END {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp RIGHT>, <&kp END>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Z  |  U   |  I  |  O  |  P        | BKSP/DEL |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  | ESC/SLASH | $        |
            // | SHFT |  Y  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  -        | SHIFT    |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&kp TAB         &kp Q     &kp W  &kp E     &kp R  &kp T        &kp DE_Z  &kp U  &kp I         &kp O       &kp P         &BS_SFT_DEL
&kp LCTRL       &kp A     &kp S  &kp D     &kp F  &kp G        &kp H     &kp J  &kp K         &kp L       &esc_slash    &kp DE_DOLLAR
&kp LEFT_SHIFT  &kp DE_Y  &kp X  &kp C     &kp V  &kp B        &kp N     &kp M  &kp DE_COMMA  &kp DE_DOT  &kp DE_MINUS  &kp RSHIFT
                                 &kp LGUI  &mo 2  &kp SPACE    &kp RET   &mo 1  &LALT_RALT
            >;
        };

        lower_layer {
            display-name = "Numbers & Arrows";
            bindings = <
&tab_f1           &n1_f2        &n2_f3          &n3_f4           &n4_f5          &n5_f6              &n6_f7          &n7_f8          &n8_f9        &n9_f10        &n0_f11      &bs_f12
&kp LEFT_CONTROL  &kp CAPSLOCK  &caps_word      &trans           &trans          &trans              &LEFT_SFT_HOME  &DWN_SFT_PGDWN  &UP_SFT_PGUP  &RGHT_SFT_END  &OE_SHFT_UE  &kp DE_A_UMLAUT
&kp LSHFT         &trans        &MUSIC_PRV_VOL  &MUSIC_TGGL_VOL  &MUSIC_NXT_VOL  &BT_NXT_PREV_CLR    &trans          &trans          &trans        &trans         &trans       &kp RIGHT_SHIFT
                                                &trans           &trans          &kp SPACE           &kp RET         &trans          &trans
            >;
        };

        raise_layer {
            display-name = "Special Chars";
            bindings = <
&kp TAB           &kp DE_SECT  &kp DE_AT             &kp DE_HASH   &kp DE_BACKSLASH  &none              &none             &kp DE_LEFT_PARENTHESIS  &kp DE_RIGHT_PARENTHESIS  &kp DE_QUESTION  &kp DE_CARET         &BS_SFT_DEL
&kp LEFT_CONTROL  &kp DE_PLUS  &kp DE_DOUBLE_QUOTES  &kp DE_ASTRK  &kp LS(DE_N4)     &kp DE_PERCENT     &kp DE_SLASH      &kp LS(DE_A_UMLAUT)      &kp LS(DE_DOLLAR)         &kp DE_EQUAL     &kp DE_TILDE         &kp DE_GRAVE
&kp LEFT_SHIFT    &none        &kp DE_LT             &kp DE_GT     &none             &kp PRINTSCREEN    &kp DE_C_CEDILLA  &kp LS(DE_U_UMLAUT)      &kp LS(DE_UMLAUT)         &kp DE_UMLAUT    &kp DE_SINGLE_QUOTE  &kp RIGHT_SHIFT
                                                     &trans        &trans            &kp SPACE          &kp RET           &trans                   &trans
            >;
        };
    };
};
